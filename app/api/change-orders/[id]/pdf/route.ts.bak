import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { generateChangeOrderPdfBlob, type ChangeOrderPdfData, type LaborBreakdown, type CostLineItem } from '@/lib/pdf/change-order'

export async function GET(_: Request, { params }: { params: { id: string } }) {
  const supabase = await createClient()
  const changeOrderId = params.id

  const { data: changeOrder, error } = await supabase
    .from('change_orders')
    .select(
      `*,
       project:projects(name, project_number)
      `
    )
    .eq('id', changeOrderId)
    .single()

  if (error || !changeOrder) {
    return NextResponse.json({ error: 'Change order not found' }, { status: 404 })
  }

  const { data: lineItemsData } = await supabase
    .from('change_order_items')
    .select('*')
    .eq('change_order_id', changeOrderId)
    .order('sort_order', { ascending: true })

  const cleanLines = (changeOrder.labor_notes ?? '')
    .split('\n')
    .map((line) => line.trim())
    .filter(Boolean)

  const laborItems: LaborBreakdown[] = cleanLines.map((line) => ({ label: line }))

  const lineItems: CostLineItem[] = (lineItemsData ?? []).map((item) => ({
    description: item.description,
    quantity: item.quantity,
    unit: item.unit,
    unitPrice: item.unit_price,
    total: item.total_price,
  }))

  const laborSubtotal =
    changeOrder.total_labor_cost ??
    (typeof changeOrder.labor_hours === 'number' && typeof changeOrder.labor_rate === 'number'
      ? changeOrder.labor_hours * changeOrder.labor_rate
      : null)

  const laborOverhead =
    changeOrder.total_overhead_cost ??
    (laborSubtotal != null && typeof changeOrder.labor_overhead_pct === 'number'
      ? laborSubtotal * changeOrder.labor_overhead_pct
      : null)

  const computedLaborTotal =
    laborSubtotal != null || laborOverhead != null ? (laborSubtotal ?? 0) + (laborOverhead ?? 0) : null
  const laborTotal = changeOrder.total_cost ?? computedLaborTotal

  const hasLaborData =
    laborItems.length > 0 ||
    [laborSubtotal, laborOverhead, changeOrder.labor_notes, changeOrder.labor_hours, changeOrder.labor_rate].some(
      (value) => value != null && value !== ''
    )

  const pdfData: ChangeOrderPdfData = {
    coNumber: changeOrder.co_number,
    title: changeOrder.title,
    projectName: changeOrder.project?.name ?? 'Project',
    projectNumber: changeOrder.project?.project_number ?? undefined,
    description: changeOrder.description,
    justification: changeOrder.justification,
    additionalInfo: changeOrder.additional_info,
    delayNoticeRef: changeOrder.delay_notice_ref,
    costImpact: changeOrder.cost_impact,
    timeImpactDays: changeOrder.time_impact_days,
    createdAt: changeOrder.updated_at ?? changeOrder.created_at ?? undefined,
    labor: hasLaborData
      ? {
          totalHours: changeOrder.labor_hours,
          rate: changeOrder.labor_rate,
          overheadPercent: changeOrder.labor_overhead_pct,
          notes: changeOrder.labor_notes,
          items: laborItems,
          subtotal: laborSubtotal,
          overhead: laborOverhead,
          total: laborTotal,
        }
      : undefined,
    totals: {
      labor: laborSubtotal,
      overhead: laborOverhead,
      grandTotal: changeOrder.total_cost ?? changeOrder.cost_impact ?? laborTotal ?? null,
    },
    lineItems: lineItems.length > 0 ? lineItems : undefined,
  }

  const blob = await generateChangeOrderPdfBlob(pdfData)
  const buffer = Buffer.from(await blob.arrayBuffer())
  const safeFileName = changeOrder.co_number.replace(/[^a-z0-9-_]+/gi, '_')

  return new NextResponse(buffer, {
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="${safeFileName || 'change-order'}.pdf"`,
      'Cache-Control': 'no-store',
    },
  })
}
